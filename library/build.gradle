apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

group = 'org.jraf'
ext.groupPath = group.replace('.', '/')
ext.artifactId = 'android-wear-color-picker'
version = '2.2.0'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 28
    }

    buildTypes {
        release {
            // Do not run proguard for this library: it would strip all code since it is not called anywhere
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Wear
    implementation 'com.android.support:wear:28.0.0'
}

// Use "./gradlew uploadArchives" to deploy the aar to your local maven repository
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenLocal().getUrl())

            pom.artifactId = artifactId
        }
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generate Javadoc for $variant.name."
        source = variant.javaCompile.source
        classpath = files(variant.javaCompile.classpath, project.android.getBootClasspath())
        options {
            links 'http://docs.oracle.com/javase/7/docs/api/'
            linksOffline 'https://developer.android.com/reference/', "${android.sdkDirectory}/docs/reference"
            tags(['attr', 'X'])
            encoding = "UTF-8"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
        description "Generate a Javadoc jar for $variant.name."
        classifier = 'javadoc'
        from buildDir.getPath() + '/docs/javadoc'
    }
}

android.libraryVariants.all { variant ->
    task("jar${variant.name.capitalize()}Sources", type: Jar) {
        description "Generate a Sources jar for $variant.name."
        classifier = 'sources'
        from variant.javaCompile.source
    }
}

// Use "./gradlew install" to deploy the aar to your local maven repository, as well as the javadoc and the source jars
// noinspection GroovyAssignabilityCheck
task install(
        group: 'install',
        description: 'Make the library, generate a source jar, generate a javadoc jar, and copy everything to the local maven repository',
        dependsOn: ['assembleRelease', 'uploadArchives', 'jarReleaseSources', 'jarReleaseJavadoc']) {
    doLast {
        // Copy the sources jar
        println("Copying " + buildDir.getPath() + "/libs/library-${version}-sources.jar" + " to " + "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}" + "/${artifactId}-${version}-sources.jar")
        copy {
            from buildDir.getPath() + "/libs/library-${version}-sources.jar"
            into "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}"
            rename "library-${version}-sources.jar", "${artifactId}-${version}-sources.jar"
        }

        // Copy the javadoc jar
        copy {
            println("Copying " + buildDir.getPath() + "/libs/library-${version}-javadoc.jar" + " to " + "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}" + "/${artifactId}-${version}-javadoc.jar")
            from buildDir.getPath() + "/libs/library-${version}-javadoc.jar"
            into "${repositories.mavenLocal().getUrl()}/${groupPath}/${artifactId}/${version}"
            rename "library-${version}-javadoc.jar", "${artifactId}-${version}-javadoc.jar"
        }
    }
}
